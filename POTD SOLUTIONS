30 OCTOBER 2022
Chicks IN A ZOO
	long long int NoOfChicks(int n){
	    vector<long long int> v(n);
	    v[0]=1;
	   long long int sum=1;
	    for(int i=1;i<n;i++){
	        if(i>=6)
	        sum=sum-v[i-6];
	        v[i]=2*sum;
	        sum+=v[i];
	    }
	    return sum;
	}
	
	1 November 2022
	
	
2 November 2022
class Solution
{
    public:
        int largestArea(int n,int m,int k,vector<vector<int>> &enemy)
        {
            //  code here
               vector<int> row,col;
            row.push_back(0);
            col.push_back(0);
            for(auto &v:enemy){
                row.push_back(v[0]);
                col.push_back(v[1]);
            }
            row.push_back(n+1);
            col.push_back(m+1);
            sort(row.begin(),row.end());
            sort(col.begin(),col.end());
            int row_mx = 0,col_mx = 0;
            for(int i=1;i<row.size();i++){
                row_mx = max(row_mx,row[i]-row[i-1]-1);
                col_mx = max(col_mx,col[i]-col[i-1]-1);
            }
            return row_mx*col_mx;
        }
};
	
	
3 November 2022
class Solution{
    public:
    int removals(vector<int>& arr, int k){
        //Code here
          sort(arr.begin(), arr.end());
        int n = arr.size();
        int i = 0, j = 0, res = n;
        while (j < n) {
            while (arr[j] - arr[i] > k)
                i++;
            res = min(res, i + n - j - 1);
            j++;
        }
        return res;
    }
};
	
4 November 2022

class Solution {
  public:
    int maxGroupSize(int arr[], int N, int K) {
        // code here
        map<int,int> m;
        for(int i=0;i<N;i++){
            m[arr[i]%K]++;
        }
        int i=1;
        int j=K-1;
        int ans=0;
        while(i<j){
            ans+=max(m[i],m[j]);
            i++;
            j--;
            
        }
        if(i==j && m[i]>0) ans++;
        if(m[0]>0) ans++;
        return ans;
    }
};
	
5 November 2022

class Solution {
  public:
    int maxGroupSize(int arr[], int N, int K) {
        // code here
        map<int,int> m;
        for(int i=0;i<N;i++){
            m[arr[i]%K]++;
        }
        int i=1;
        int j=K-1;
        int ans=0;
        while(i<j){
            ans+=max(m[i],m[j]);
            i++;
            j--;
            
        }
        if(i==j && m[i]>0) ans++;
        if(m[0]>0) ans++;
        return ans;
    }
};
//6 November 2022
class Solution{
public:
    vector<int> minPartition(int N)
    {
        // code here
        vector<int> arr={1,2,5,10,20,50,100,200,500,2000};
        vector<int> v;
        int last = arr.size()-1;
        while(last>=0){
            if(arr[last]<=N){
                N=N-arr[last];
                v.push_back(arr[last]);
            }
            else{
                last--;
            }
        }
        return v;
    }
};

//7 November 2022
//It is based on Floyd Warshall Algorithm
class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n= matrix.size();
	    for(int i=0;i<n;i++){
	        for(int j=0;j<n;j++){
	            if(matrix[i][j]==-1){
	                matrix[i][j]=1e9;
	            }
	            if(i==j){
	                matrix[i][j]=0;
	            }
	        }
	    }
	    
	    
	    for(int v=0;v<n;v++){
	        for(int i=0;i<n;i++){
	            for(int j=0;j<n;j++){
	                matrix[i][j]=min(matrix[i][j],matrix[i][v]+matrix[v][j]);
	            }
	        }
	    }
	    
	    
	    
	    for(int i=0;i<n;i++){
	        for(int j=0;j<n;j++){
	            if(matrix[i][j]==1e9)
	              matrix[i][j]=-1;
	        }
	    }
	    
	}
};
//8 november 2022
class Solution{
    public:
    vector<long long int> twoOddNum(long long int Arr[], long long int N)  
    {
        int x=0;
        for(int i=0;i<N;i++){
            x^=Arr[i];
        }
        int setbit = x & ~(x-1);
        int f=0;
        int s=0;
        for(int i=0;i<N;i++){
            if(setbit & Arr[i])
            {
                f=f^Arr[i];
            }
            else{
                s=s^Arr[i];
            }
        }
        if(f>=s)
         return {f,s};
        else
        return {s,f};
        
    }
};
//9 NOBEMBER 2022
  int ans=INT_MAX;
	    int sum = 0;
	    for(int i=0;i<n;i++)
	    {
	        sum+=arr[i];
	    }
	    
	    bool t[n+1][sum+1];
	    
	    for(int i=0;i<=n;i++)
	    {
	        for(int j=0;j<=sum;j++)
	        {
	            if(i==0) t[i][j]=false;
	            if(j==0) t[i][j]=true;
	        }
	    }
	    
	    for(int i=1;i<=n;i++)
	    {
	        for(int j=1;j<=sum;j++)
	        {
	            if(arr[i-1]<=j)
	            {
	                t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
	            }
	            else {
	                t[i][j]=t[i-1][j];
	            }
	        }
	    }
	    
	    vector<int> s1;
	    
	    for(int i=0;i<sum/2+1;i++)
	    {
	        if(t[n][i]) s1.push_back(i);
	    }
	    
	    for(int it:s1)
	    {
	        ans=min(ans,sum-(2*it));
	    }
	    return ans;
	    
	    //10 November 2022
	       int n = size(s);
        
        if(n == 1) return true; // if string size 1 then simple return true if symbol is present no need worry about we don't need remove question ask return 
        //true or false
        
        string str = "";
        for(int i=0; i<n; i++) if(isalnum(s[i])) str +=s[i]; // only put number and char not any symbol
        
        // converting whole string into uppercase
        transform(str.begin(), str.end(), str.begin(), ::toupper);
        
        int i=0,j=size(str)-1;
        
        while(i<j) {
            if(str[i] != str[j]) return false; // checking where two char are not same then return false
            i++,j--;
        }
        return true;
